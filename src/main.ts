import { Add, Negate, Num, One, Subtract, Zero } from './IntegerType';
import { Add as AddQ, Quantity, Subtract as SubtractQ } from './Quantity';
import { hour, kilo, meter, second } from './Units';

(() => {
  // For Testing:
  type Two = Add<One, One>;
  type Three = Add<Two, One>;
  type Four = Add<Three, One>;
  type Five = Add<Four, One>;
  const test = <T extends Num>(_: T) => {};
  test<Zero>('+');
  test<One>('+1');
  test<Two>('+11');
  test<Three>('+111');
  test<Four>('+1111');
  test<Five>('+11111');
  test<Negate<Zero>>('+');
  test<Negate<One>>('-1');
  test<Negate<Two>>('-11');
  test<Negate<Three>>('-111');
  test<Negate<Four>>('-1111');
  test<Negate<Five>>('-11111');
  test<Add<Zero, Zero>>('+');
  test<Add<Zero, Negate<Zero>>>('+');
  test<Add<Zero, One>>('+1');
  test<Add<One, Zero>>('+1');
  test<Add<Three, Five>>('+11111111');
  test<Add<Five, Five>>('+1111111111');
  test<Add<Five, Three>>('+11111111');
  test<Add<Negate<Zero>, Zero>>('+');
  test<Add<Negate<Zero>, Negate<One>>>('-1');
  test<Add<Negate<One>, Zero>>('-1');
  test<Add<Three, Negate<Five>>>('-11');
  test<Add<Negate<Five>, Negate<Five>>>('-1111111111');
  test<Add<Five, Negate<Three>>>('+11');
  test<Subtract<Negate<Four>, Three>>('-1111111');
  test<Subtract<Five, Four>>('+1');
  test<Subtract<Two, Five>>('-111');
  test<Subtract<Add<Five, Five>, One>>('+111111111');
  test<Subtract<Subtract<Negate<Five>, Five>, Five>>('-111111111111111');
  test<Add<One, Add<One, Add<One, Add<One, Add<One, Add<One, Add<One, Add<One, One>>>>>>>>>(
    '+111111111'
  );
  test<Subtract<Negate<Five>, Add<Five, Add<Five, Add<Five, Five>>>>>('-1111111111111111111111111');
  const testQ = <T extends Quantity>(_: T) => {};
  testQ<{}>({});
  testQ<{}>({ anythingCanGoHere: '+33lkj2j22' });
  testQ<AddQ<{}, { a: '+1' }>>({ a: '+1' });
  testQ<AddQ<{ a: '+1' }, { a: '+1' }>>({ a: '+11' });
  testQ<AddQ<{ a: '+1' }, { a: '+1'; b: '+1' }>>({ a: '+11', b: '+1' });
  testQ<AddQ<{ a: '+1' }, { a: '+1'; b: '-1' }>>({ a: '+11', b: '-1' });
  testQ<AddQ<{ a: '+11' }, { a: '+1'; b: '-1' }>>({ a: '+111', b: '-1' });
  testQ<AddQ<{ a: '+11' }, { a: '-1'; b: '-1' }>>({ a: '+1', b: '-1' });
  testQ<SubtractQ<{}, { a: '+1' }>>({ a: '-1' });
  testQ<SubtractQ<{ b: '+1' }, { a: '+1' }>>({ a: '-1', b: '+1' });
  testQ<SubtractQ<{ a: '+1'; b: '+1' }, { a: '+1' }>>({ b: '+1' });
  testQ<SubtractQ<{ a: '+1'; b: '+1' }, { a: '+1' }>>({ b: '+1' });
  testQ<SubtractQ<{ length: '+1'; time: '+1' }, { time: '+1' }>>({ length: '+1' });
  testQ<AddQ<{ length: '+1'; time: '+1' }, { time: '-1' }>>({ length: '+1' });
  hour(5).times(meter(1)).per(second(1)).into(kilo.meter);
})();
